name: Test

on:
  push:
    branches:
      - "main"
      - "ci/*"
  pull_request:
    types: [opened, synchronize]

jobs:
  create-virtualenv:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
    steps:
      - name: source code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: virtualenv cache
        uses: syphar/restore-virtualenv@v1.2
        id: cache-virtualenv-tests
        with:
          custom_cache_key_element: tests

      - name: pip cache
        uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        with:
          custom_cache_key_element: tests

      - name: Install poetry
        env:
          POETRY_VERSION: 1.1.4
        run: |
          pip install pip==20.3.1 setuptools==50.3.2
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
          source $HOME/.poetry/env
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root -E dev_test -E dev_lint

      - name: List installed packages
        run: poetry show

  lint:
    needs: create-virtualenv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
          architecture: x64

      - name: Restore virtualenv cache
        uses: syphar/restore-virtualenv@v1.2
        id: cache-virtualenv-tests
        with:
          custom_cache_key_element: tests

      - name: lint
        run: |
          black --check .
          mypy turbulette --ignore-missing-imports

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: test
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Restore virtualenv cache
        uses: syphar/restore-virtualenv@v1.2
        id: cache-virtualenv-tests
        with:
          custom_cache_key_element: tests

      - name: Test
        env:
          DB_DRIVER: postgresql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: ""
          TURBULETTE_SETTINGS_MODULE: tests.settings
        run: export PYTHONPATH=$PYTHONPATH:$(pwd)/turbulette && make testcov-xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        if: matrix.python-version == '3.9'
        with:
          name: coverage
          path: ./coverage.xml
